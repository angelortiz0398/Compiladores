/* The following code was generated by JFlex 1.4.3 on 20/04/20 23:31 */

package src;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/04/20 23:31 from the specification file
 * <tt>C:/Users/9/OneDrive/Documentos/NetBeansProjects/vmc/src/src/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  5,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 40,  6,  0,  0, 43, 38,  0, 44, 45, 37, 35,  3, 36,  0,  4, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 55, 42, 34, 41,  0, 
     0,  1,  1, 23, 26, 29, 25,  1, 30,  1,  1,  1, 24, 32,  1,  1, 
    33,  1, 53, 27,  1,  1, 50,  1,  1,  1,  1, 48,  0, 49,  0,  1, 
     0, 15,  7, 13, 21, 10, 20, 19, 14, 11,  1, 52, 17, 54, 12, 18, 
    51,  1, 16, 28,  9, 22,  1, 31,  1,  8,  1, 46, 39, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\23\2"+
    "\1\7\1\10\1\11\1\12\3\13\2\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\4\2\1\23\1\4"+
    "\1\24\5\2\1\25\11\2\1\26\10\2\1\27\10\2"+
    "\1\14\1\30\1\13\1\0\11\2\1\31\7\2\1\32"+
    "\22\2\1\0\6\2\1\33\1\34\22\2\1\35\1\2"+
    "\1\3\1\2\1\36\2\2\1\37\1\40\1\41\1\2"+
    "\1\42\3\2\1\43\7\2\1\44\1\45\2\2\1\46"+
    "\7\2\1\47\1\50\5\2\1\51\1\52\10\2\1\53"+
    "\1\54\4\2\1\55\1\56\1\57\2\2\1\60\3\2"+
    "\1\61\1\62\2\2\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u0578\0\u06c8\0\u0700\0\u0620\0\u0738\0\70\0\70\0\70"+
    "\0\70\0\70\0\u0770\0\u07a8\0\u07e0\0\u0818\0\70\0\u0850"+
    "\0\70\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\160\0\u09a0"+
    "\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\160\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0ee0\0\u0f18\0\70\0\70\0\70\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\160"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\160"+
    "\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810"+
    "\0\u1848\0\160\0\160\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\160\0\u1c70\0\70"+
    "\0\u1ca8\0\160\0\u1ce0\0\u1d18\0\160\0\160\0\160\0\u1d50"+
    "\0\160\0\u1d88\0\u1dc0\0\u1df8\0\160\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\160\0\160\0\u1fb8\0\u1ff0"+
    "\0\160\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178"+
    "\0\160\0\160\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\160"+
    "\0\160\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418"+
    "\0\u2450\0\160\0\160\0\u2488\0\u24c0\0\u24f8\0\u2530\0\160"+
    "\0\160\0\160\0\u2568\0\u25a0\0\160\0\u25d8\0\u2610\0\u2648"+
    "\0\160\0\160\0\u2680\0\u26b8\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\3\1\14\3\3\1\15"+
    "\2\3\1\16\1\17\1\3\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\3\1\55\1\56\1\57\71\0\2\3\4\0"+
    "\33\3\20\0\5\3\3\0\1\4\70\0\1\5\1\0"+
    "\1\5\66\0\1\60\35\0\1\61\26\0\2\3\4\0"+
    "\1\3\1\62\7\3\1\63\21\3\20\0\5\3\2\0"+
    "\2\3\4\0\11\3\1\64\21\3\20\0\5\3\2\0"+
    "\2\3\4\0\12\3\1\65\20\3\20\0\5\3\2\0"+
    "\2\3\4\0\5\3\1\66\7\3\1\67\15\3\20\0"+
    "\5\3\2\0\2\3\4\0\7\3\1\70\2\3\1\71"+
    "\1\72\17\3\20\0\5\3\2\0\2\3\4\0\13\3"+
    "\1\73\17\3\20\0\5\3\2\0\2\3\4\0\4\3"+
    "\1\74\3\3\1\75\1\3\1\76\1\77\17\3\20\0"+
    "\5\3\2\0\2\3\4\0\3\3\1\100\7\3\1\101"+
    "\17\3\20\0\5\3\2\0\2\3\4\0\10\3\1\102"+
    "\1\3\1\103\1\104\17\3\20\0\5\3\2\0\2\3"+
    "\4\0\10\3\1\105\22\3\20\0\5\3\2\0\2\3"+
    "\4\0\4\3\1\106\5\3\1\107\20\3\20\0\5\3"+
    "\2\0\2\3\4\0\13\3\1\110\17\3\20\0\5\3"+
    "\2\0\2\3\4\0\2\3\1\111\1\3\1\112\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\113\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\114\17\3"+
    "\1\115\5\3\20\0\5\3\2\0\2\3\4\0\10\3"+
    "\1\116\22\3\20\0\5\3\2\0\2\3\4\0\7\3"+
    "\1\117\23\3\20\0\5\3\2\0\2\3\4\0\4\3"+
    "\1\120\26\3\20\0\5\3\2\0\2\3\4\0\10\3"+
    "\1\121\6\3\1\122\13\3\20\0\5\3\43\0\1\123"+
    "\67\0\1\61\1\124\66\0\1\61\1\0\1\124\65\0"+
    "\1\61\73\0\1\125\70\0\1\125\62\0\1\123\6\0"+
    "\1\123\60\0\1\123\7\0\1\123\61\0\1\126\24\0"+
    "\2\3\4\0\10\3\1\127\2\3\1\130\17\3\20\0"+
    "\5\3\2\0\2\3\4\0\17\3\1\131\13\3\20\0"+
    "\5\3\2\0\2\3\4\0\13\3\1\132\17\3\20\0"+
    "\5\3\2\0\2\3\4\0\10\3\1\133\22\3\20\0"+
    "\5\3\1\0\5\60\1\0\62\60\1\0\2\3\4\0"+
    "\2\3\1\134\30\3\20\0\5\3\2\0\2\3\4\0"+
    "\3\3\1\135\27\3\20\0\5\3\2\0\2\3\4\0"+
    "\17\3\1\136\13\3\20\0\5\3\2\0\2\3\4\0"+
    "\25\3\1\137\5\3\20\0\5\3\2\0\2\3\4\0"+
    "\2\3\1\140\30\3\20\0\5\3\2\0\2\3\4\0"+
    "\10\3\1\141\22\3\20\0\5\3\2\0\2\3\4\0"+
    "\10\3\1\142\22\3\20\0\5\3\2\0\2\3\4\0"+
    "\5\3\1\143\25\3\20\0\5\3\2\0\2\3\4\0"+
    "\5\3\1\144\25\3\20\0\5\3\2\0\2\3\4\0"+
    "\5\3\1\145\25\3\20\0\5\3\2\0\2\3\4\0"+
    "\12\3\1\146\20\3\20\0\5\3\2\0\2\3\4\0"+
    "\13\3\1\147\17\3\20\0\5\3\2\0\2\3\4\0"+
    "\11\3\1\150\21\3\20\0\5\3\2\0\2\3\4\0"+
    "\12\3\1\151\20\3\20\0\5\3\2\0\2\3\4\0"+
    "\17\3\1\110\13\3\20\0\5\3\2\0\2\3\4\0"+
    "\11\3\1\152\21\3\20\0\5\3\2\0\2\3\4\0"+
    "\10\3\1\153\22\3\20\0\5\3\2\0\2\3\4\0"+
    "\5\3\1\154\25\3\20\0\5\3\2\0\2\3\4\0"+
    "\11\3\1\155\21\3\20\0\5\3\2\0\2\3\4\0"+
    "\5\3\1\156\25\3\20\0\5\3\2\0\2\3\4\0"+
    "\13\3\1\157\17\3\20\0\5\3\2\0\2\3\4\0"+
    "\1\160\32\3\20\0\5\3\2\0\2\3\4\0\10\3"+
    "\1\161\1\162\21\3\20\0\5\3\2\0\2\3\4\0"+
    "\23\3\1\163\7\3\20\0\5\3\2\0\2\3\4\0"+
    "\2\3\1\164\30\3\20\0\5\3\2\0\2\3\4\0"+
    "\2\3\1\165\30\3\20\0\5\3\2\0\2\3\4\0"+
    "\6\3\1\166\24\3\20\0\5\3\2\0\2\3\4\0"+
    "\4\3\1\167\26\3\20\0\5\3\2\0\2\3\4\0"+
    "\3\3\1\170\27\3\20\0\5\3\2\0\2\3\4\0"+
    "\11\3\1\171\21\3\20\0\5\3\2\0\2\3\4\0"+
    "\1\172\32\3\20\0\5\3\3\0\1\173\66\0\2\3"+
    "\4\0\6\3\1\174\24\3\20\0\5\3\2\0\2\3"+
    "\4\0\4\3\1\175\26\3\20\0\5\3\2\0\2\3"+
    "\4\0\1\176\32\3\20\0\5\3\2\0\2\3\4\0"+
    "\33\3\20\0\4\3\1\177\2\0\2\3\4\0\4\3"+
    "\1\200\26\3\20\0\5\3\2\0\2\3\4\0\3\3"+
    "\1\140\27\3\20\0\5\3\2\0\2\3\4\0\10\3"+
    "\1\201\22\3\20\0\5\3\2\0\2\3\4\0\3\3"+
    "\1\202\27\3\20\0\5\3\2\0\2\3\4\0\3\3"+
    "\1\203\27\3\20\0\5\3\2\0\2\3\4\0\11\3"+
    "\1\140\21\3\20\0\5\3\2\0\2\3\4\0\25\3"+
    "\1\204\5\3\20\0\5\3\2\0\2\3\4\0\2\3"+
    "\1\205\30\3\20\0\5\3\2\0\2\3\4\0\14\3"+
    "\1\140\16\3\20\0\5\3\2\0\2\3\4\0\10\3"+
    "\1\206\12\3\1\207\7\3\20\0\5\3\2\0\2\3"+
    "\4\0\25\3\1\136\5\3\20\0\5\3\2\0\2\3"+
    "\4\0\10\3\1\66\22\3\20\0\5\3\2\0\2\3"+
    "\4\0\13\3\1\210\17\3\20\0\5\3\2\0\2\3"+
    "\4\0\10\3\1\211\22\3\20\0\5\3\2\0\2\3"+
    "\4\0\25\3\1\212\5\3\20\0\5\3\2\0\2\3"+
    "\4\0\2\3\1\213\30\3\20\0\5\3\2\0\2\3"+
    "\4\0\14\3\1\214\16\3\20\0\5\3\2\0\2\3"+
    "\4\0\10\3\1\206\22\3\20\0\5\3\2\0\2\3"+
    "\4\0\2\3\1\215\30\3\20\0\5\3\2\0\2\3"+
    "\4\0\12\3\1\134\20\3\20\0\5\3\2\0\2\3"+
    "\4\0\2\3\1\216\30\3\20\0\5\3\2\0\2\3"+
    "\4\0\4\3\1\217\26\3\20\0\5\3\2\0\2\3"+
    "\4\0\3\3\1\220\27\3\20\0\5\3\2\0\2\3"+
    "\4\0\13\3\1\221\17\3\20\0\5\3\2\0\2\3"+
    "\4\0\10\3\1\222\22\3\20\0\5\3\2\0\2\3"+
    "\4\0\3\3\1\223\27\3\20\0\5\3\2\0\2\3"+
    "\4\0\12\3\1\224\20\3\20\0\5\3\2\0\2\3"+
    "\4\0\5\3\1\225\25\3\20\0\5\3\2\0\2\3"+
    "\4\0\10\3\1\226\22\3\20\0\5\3\2\0\2\3"+
    "\4\0\12\3\1\227\20\3\20\0\5\3\3\0\1\173"+
    "\52\0\1\230\13\0\2\3\4\0\4\3\1\231\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\16\3\1\232\14\3"+
    "\20\0\5\3\2\0\2\3\4\0\12\3\1\233\20\3"+
    "\20\0\5\3\2\0\2\3\4\0\33\3\20\0\1\3"+
    "\1\234\3\3\2\0\2\3\4\0\5\3\1\235\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\33\3\20\0\2\3"+
    "\1\236\2\3\2\0\2\3\4\0\25\3\1\237\5\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\240\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\12\3\1\241\20\3"+
    "\20\0\5\3\2\0\2\3\4\0\3\3\1\242\27\3"+
    "\20\0\5\3\2\0\2\3\4\0\6\3\1\243\24\3"+
    "\20\0\5\3\2\0\2\3\4\0\6\3\1\244\24\3"+
    "\20\0\5\3\2\0\2\3\4\0\3\3\1\245\27\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\246\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\13\3\1\140\17\3"+
    "\20\0\5\3\2\0\2\3\4\0\10\3\1\247\22\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\250\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\251\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\15\3\1\252\15\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\253\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\2\3\1\254\30\3"+
    "\20\0\5\3\2\0\2\3\4\0\11\3\1\255\21\3"+
    "\20\0\5\3\2\0\2\3\4\0\3\3\1\256\27\3"+
    "\20\0\5\3\2\0\2\3\4\0\2\3\1\257\30\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\260\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\13\3\1\261\17\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\262\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\3\3\1\263\27\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\264\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\15\3\1\265\15\3"+
    "\20\0\5\3\2\0\2\3\4\0\13\3\1\266\17\3"+
    "\20\0\5\3\2\0\2\3\4\0\2\3\1\267\30\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\270\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\62\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\6\3\1\271\24\3"+
    "\20\0\5\3\2\0\2\3\4\0\14\3\1\272\16\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\273\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\6\3\1\274\24\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\275\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\11\3\1\276\21\3"+
    "\20\0\5\3\2\0\2\3\4\0\6\3\1\277\24\3"+
    "\20\0\5\3\2\0\2\3\4\0\6\3\1\300\24\3"+
    "\20\0\5\3\2\0\2\3\4\0\11\3\1\301\21\3"+
    "\20\0\5\3\2\0\2\3\4\0\17\3\1\302\13\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\303\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\304\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\3\3\1\141\27\3"+
    "\20\0\5\3\2\0\2\3\4\0\17\3\1\305\13\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\306\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\3\3\1\307\27\3"+
    "\20\0\5\3\2\0\2\3\4\0\6\3\1\310\24\3"+
    "\20\0\5\3\2\0\2\3\4\0\10\3\1\311\22\3"+
    "\20\0\5\3\2\0\2\3\4\0\13\3\1\312\17\3"+
    "\20\0\5\3\2\0\2\3\4\0\3\3\1\313\27\3"+
    "\20\0\5\3\2\0\2\3\4\0\5\3\1\314\25\3"+
    "\20\0\5\3\2\0\2\3\4\0\2\3\1\315\30\3"+
    "\20\0\5\3\2\0\2\3\4\0\10\3\1\316\22\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\317\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\25\3\1\320\5\3"+
    "\20\0\5\3\2\0\2\3\4\0\13\3\1\321\17\3"+
    "\20\0\5\3\2\0\2\3\4\0\25\3\1\322\5\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\323\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\11\3\1\324\21\3"+
    "\20\0\5\3\2\0\2\3\4\0\11\3\1\325\21\3"+
    "\20\0\5\3\2\0\2\3\4\0\16\3\1\326\14\3"+
    "\20\0\5\3\2\0\2\3\4\0\16\3\1\327\14\3"+
    "\20\0\5\3\2\0\2\3\4\0\10\3\1\330\22\3"+
    "\20\0\5\3\2\0\2\3\4\0\13\3\1\331\17\3"+
    "\20\0\5\3\2\0\2\3\4\0\13\3\1\332\17\3"+
    "\20\0\5\3\2\0\2\3\4\0\11\3\1\333\21\3"+
    "\20\0\5\3\2\0\2\3\4\0\4\3\1\334\26\3"+
    "\20\0\5\3\2\0\2\3\4\0\13\3\1\335\17\3"+
    "\20\0\5\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9968];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\36\1\5\11\4\1\1\11"+
    "\1\1\1\11\41\1\3\11\1\0\44\1\1\0\34\1"+
    "\1\11\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return new Symbol(sym.Para, yychar, yyline, yytext());
          }
        case 52: break;
        case 40: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 53: break;
        case 30: 
          { return new Symbol(sym.Void, yychar, yyline, yytext());
          }
        case 54: break;
        case 32: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 55: break;
        case 33: 
          { return new Symbol(sym.Class, yychar, yyline, yytext());
          }
        case 56: break;
        case 46: 
          { return new Symbol(sym.Estatico, yychar, yyline, yytext());
          }
        case 57: break;
        case 20: 
          { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
          }
        case 58: break;
        case 28: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 59: break;
        case 39: 
          { return new Symbol(sym.Static, yychar, yyline, yytext());
          }
        case 60: break;
        case 38: 
          { return new Symbol(sym.Vacio, yychar, yyline, yytext());
          }
        case 61: break;
        case 18: 
          { return new Symbol(sym.CorcheteDer, yychar, yyline, yytext());
          }
        case 62: break;
        case 11: 
          { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
          }
        case 63: break;
        case 34: 
          { return new Symbol(sym.Final, yychar, yyline, yytext());
          }
        case 64: break;
        case 5: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 65: break;
        case 16: 
          { return new Symbol(sym.LlaveDer, yychar, yyline, yytext());
          }
        case 66: break;
        case 50: 
          { return new Symbol(sym.FinDefinido, yychar, yyline, yytext());
          }
        case 67: break;
        case 22: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 68: break;
        case 23: 
          { return new Symbol(sym.Si, yychar, yyline, yytext());
          }
        case 69: break;
        case 17: 
          { return new Symbol(sym.CorcheteIzq, yychar, yyline, yytext());
          }
        case 70: break;
        case 6: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 71: break;
        case 26: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 72: break;
        case 36: 
          { return new Symbol(sym.Hacer, yychar, yyline, yytext());
          }
        case 73: break;
        case 44: 
          { return new Symbol(sym.Continue, yychar, yyline, yytext());
          }
        case 74: break;
        case 15: 
          { return new Symbol(sym.LlaveIzq, yychar, yyline, yytext());
          }
        case 75: break;
        case 9: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 76: break;
        case 25: 
          { return new Symbol(sym.Tipo, yychar, yyline, yytext());
          }
        case 77: break;
        case 21: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 78: break;
        case 47: 
          { return new Symbol(sym.Mientras, yychar, yyline, yytext());
          }
        case 79: break;
        case 24: 
          { return new Symbol(sym.Op_incremento, yychar, yyline, yytext());
          }
        case 80: break;
        case 14: 
          { return new Symbol(sym.ParDer, yychar, yyline, yytext());
          }
        case 81: break;
        case 31: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 82: break;
        case 19: 
          { return new Symbol(sym.P_coma, yychar, yyline, yytext());
          }
        case 83: break;
        case 35: 
          { return new Symbol(sym.Clase, yychar, yyline, yytext());
          }
        case 84: break;
        case 45: 
          { return new Symbol(sym.Entonces, yychar, yyline, yytext());
          }
        case 85: break;
        case 48: 
          { return new Symbol(sym.Continuar, yychar, yyline, yytext());
          }
        case 86: break;
        case 13: 
          { return new Symbol(sym.ParIzq, yychar, yyline, yytext());
          }
        case 87: break;
        case 10: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 88: break;
        case 8: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 89: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 90: break;
        case 49: 
          { return new Symbol(sym.SiDefinido, yychar, yyline, yytext());
          }
        case 91: break;
        case 42: 
          { return new Symbol(sym.Romper, yychar, yyline, yytext());
          }
        case 92: break;
        case 37: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 93: break;
        case 4: 
          { /*Ignore*/
          }
        case 94: break;
        case 41: 
          { return new Symbol(sym.Public, yychar, yyline, yytext());
          }
        case 95: break;
        case 7: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 96: break;
        case 43: 
          { return new Symbol(sym.Publico, yychar, yyline, yytext());
          }
        case 97: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 98: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 99: break;
        case 12: 
          { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
          }
        case 100: break;
        case 51: 
          { return new Symbol(sym.Sino, yychar, yyline, yytext());
          }
        case 101: break;
        case 27: 
          { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
