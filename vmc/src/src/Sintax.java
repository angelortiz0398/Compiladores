
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 20 23:31:50 CDT 2020
//----------------------------------------------------

package src;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 20 23:31:50 CDT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\011\000\002\002" +
    "\011\000\002\002\010\000\002\002\013\000\002\002\013" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\011\000\002" +
    "\004\011\000\002\006\011\000\002\006\011\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\007\000\002\007\015\000" +
    "\002\007\015\000\002\010\011\000\002\010\011\000\002" +
    "\011\013\000\002\011\013\000\002\012\011\000\002\012" +
    "\011\000\002\014\012\000\002\014\011\000\002\005\005" +
    "\000\002\005\004\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\014\042\010\043\011\044\005\045\006\056" +
    "\004\001\002\000\004\034\272\001\002\000\004\036\262" +
    "\001\002\000\004\037\252\001\002\000\004\002\251\001" +
    "\002\000\004\056\243\001\002\000\004\056\012\001\002" +
    "\000\004\034\013\001\002\000\004\035\014\001\002\000" +
    "\004\054\015\001\002\000\022\004\017\006\021\007\031" +
    "\014\020\015\026\016\033\017\024\025\025\001\002\000" +
    "\030\004\ufff4\006\ufff4\007\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\025\ufff4\055\ufff4\001\002\000" +
    "\006\022\227\060\226\001\002\000\004\034\220\001\002" +
    "\000\006\034\200\035\201\001\002\000\030\004\ufff1\006" +
    "\ufff1\007\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\025\ufff1\055\ufff1\001\002\000\030\004\ufffa\006" +
    "\ufffa\007\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\025\ufffa\055\ufffa\001\002\000\004\034\172\001" +
    "\002\000\004\060\153\001\002\000\004\034\145\001\002" +
    "\000\030\004\ufff6\006\ufff6\007\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\025\ufff6\055\ufff6\001\002" +
    "\000\030\004\ufff8\006\ufff8\007\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\025\ufff8\055\ufff8\001\002" +
    "\000\004\034\133\001\002\000\030\004\017\006\021\007" +
    "\031\012\103\013\107\014\020\015\026\016\033\017\024" +
    "\025\025\055\132\001\002\000\004\034\034\001\002\000" +
    "\006\004\036\060\037\001\002\000\004\035\075\001\002" +
    "\000\004\060\066\001\002\000\004\024\040\001\002\000" +
    "\004\067\041\001\002\000\004\057\042\001\002\000\006" +
    "\023\044\060\045\001\002\000\004\057\056\001\002\000" +
    "\006\035\uffe5\057\uffe5\001\002\000\004\020\046\001\002" +
    "\000\012\005\050\023\051\060\052\067\047\001\002\000" +
    "\006\035\uffe3\057\uffe3\001\002\000\006\005\053\060\054" +
    "\001\002\000\006\035\uffe4\057\uffe4\001\002\000\006\035" +
    "\uffe2\057\uffe2\001\002\000\006\035\uffe1\057\uffe1\001\002" +
    "\000\004\005\055\001\002\000\006\035\uffe0\057\uffe0\001" +
    "\002\000\006\022\061\060\060\001\002\000\004\035\uffd6" +
    "\001\002\000\006\021\063\022\064\001\002\000\004\060" +
    "\062\001\002\000\004\035\uffd3\001\002\000\004\067\065" +
    "\001\002\000\004\035\uffd4\001\002\000\004\035\uffd5\001" +
    "\002\000\004\024\067\001\002\000\004\067\070\001\002" +
    "\000\004\057\071\001\002\000\006\023\044\060\045\001" +
    "\002\000\004\057\073\001\002\000\006\022\061\060\060" +
    "\001\002\000\004\035\uffd7\001\002\000\004\054\076\001" +
    "\002\000\022\004\017\006\021\007\031\014\020\015\026" +
    "\016\033\017\024\025\025\001\002\000\030\004\017\006" +
    "\021\007\031\012\103\013\107\014\020\015\026\016\033" +
    "\017\024\025\025\055\106\001\002\000\030\004\ufff5\006" +
    "\ufff5\007\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\025\ufff5\055\ufff5\001\002\000\030\004\ufff2\006" +
    "\ufff2\007\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\025\ufff2\055\ufff2\001\002\000\030\004\ufffb\006" +
    "\ufffb\007\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\025\ufffb\055\ufffb\001\002\000\004\054\122\001" +
    "\002\000\030\004\ufff7\006\ufff7\007\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\025\ufff7\055\ufff7\001" +
    "\002\000\030\004\ufff9\006\ufff9\007\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\025\ufff9\055\ufff9\001" +
    "\002\000\030\004\uffd9\006\uffd9\007\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\025\uffd9\055\uffd9\001" +
    "\002\000\004\054\112\001\002\000\006\012\103\013\107" +
    "\001\002\000\030\004\ufff3\006\ufff3\007\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\025\ufff3\055\ufff3" +
    "\001\002\000\022\004\017\006\021\007\031\014\020\015" +
    "\026\016\033\017\024\025\025\001\002\000\030\004\017" +
    "\006\021\007\031\012\103\013\107\014\020\015\026\016" +
    "\033\017\024\025\025\055\114\001\002\000\004\015\115" +
    "\001\002\000\004\034\116\001\002\000\006\023\044\060" +
    "\045\001\002\000\004\035\120\001\002\000\004\057\121" +
    "\001\002\000\030\004\uffda\006\uffda\007\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\025\uffda\055\uffda" +
    "\001\002\000\022\004\017\006\021\007\031\014\020\015" +
    "\026\016\033\017\024\025\025\001\002\000\030\004\017" +
    "\006\021\007\031\012\103\013\107\014\020\015\026\016" +
    "\033\017\024\025\025\055\124\001\002\000\004\014\125" +
    "\001\002\000\004\034\126\001\002\000\006\023\044\060" +
    "\045\001\002\000\004\035\130\001\002\000\004\057\131" +
    "\001\002\000\030\004\uffdb\006\uffdb\007\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\025\uffdb\055\uffdb" +
    "\001\002\000\004\002\uffff\001\002\000\006\023\044\060" +
    "\045\001\002\000\004\035\135\001\002\000\004\054\136" +
    "\001\002\000\022\004\017\006\021\007\031\014\020\015" +
    "\026\016\033\017\024\025\025\001\002\000\030\004\017" +
    "\006\021\007\031\012\103\013\107\014\020\015\026\016" +
    "\033\017\024\025\025\055\140\001\002\000\032\004\uffe6" +
    "\006\uffe6\007\uffe6\011\141\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\025\uffe6\055\uffe6\001\002\000\004" +
    "\054\142\001\002\000\022\004\017\006\021\007\031\014" +
    "\020\015\026\016\033\017\024\025\025\001\002\000\030" +
    "\004\017\006\021\007\031\012\103\013\107\014\020\015" +
    "\026\016\033\017\024\025\025\055\144\001\002\000\030" +
    "\004\uffde\006\uffde\007\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\025\uffde\055\uffde\001\002\000\006" +
    "\023\044\060\045\001\002\000\004\035\147\001\002\000" +
    "\004\054\150\001\002\000\022\004\017\006\021\007\031" +
    "\014\020\015\026\016\033\017\024\025\025\001\002\000" +
    "\030\004\017\006\021\007\031\012\103\013\107\014\020" +
    "\015\026\016\033\017\024\025\025\055\152\001\002\000" +
    "\030\004\uffdc\006\uffdc\007\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\025\uffdc\055\uffdc\001\002\000" +
    "\006\021\154\024\155\001\002\000\004\005\164\001\002" +
    "\000\004\005\156\001\002\000\006\005\157\060\160\001" +
    "\002\000\004\057\163\001\002\000\004\005\161\001\002" +
    "\000\004\057\162\001\002\000\030\004\uffe8\006\uffe8\007" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\025\uffe8\055\uffe8\001\002\000\030\004\uffea\006\uffea\007" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\025\uffea\055\uffea\001\002\000\006\005\165\060\166\001" +
    "\002\000\004\057\171\001\002\000\004\005\167\001\002" +
    "\000\004\057\170\001\002\000\030\004\uffe9\006\uffe9\007" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\025\uffe9\055\uffe9\001\002\000\030\004\uffeb\006\uffeb\007" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\025\uffeb\055\uffeb\001\002\000\006\004\036\060\037\001" +
    "\002\000\004\035\174\001\002\000\004\054\175\001\002" +
    "\000\022\004\017\006\021\007\031\014\020\015\026\016" +
    "\033\017\024\025\025\001\002\000\030\004\017\006\021" +
    "\007\031\012\103\013\107\014\020\015\026\016\033\017" +
    "\024\025\025\055\177\001\002\000\030\004\uffd8\006\uffd8" +
    "\007\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\025\uffd8\055\uffd8\001\002\000\006\023\044\060\045" +
    "\001\002\000\006\023\044\060\045\001\002\000\004\035" +
    "\203\001\002\000\004\054\204\001\002\000\022\004\017" +
    "\006\021\007\031\014\020\015\026\016\033\017\024\025" +
    "\025\001\002\000\030\004\017\006\021\007\031\012\103" +
    "\013\107\014\020\015\026\016\033\017\024\025\025\055" +
    "\206\001\002\000\030\004\uffe7\006\uffe7\007\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\025\uffe7\055" +
    "\uffe7\001\002\000\004\035\210\001\002\000\004\054\211" +
    "\001\002\000\022\004\017\006\021\007\031\014\020\015" +
    "\026\016\033\017\024\025\025\001\002\000\030\004\017" +
    "\006\021\007\031\012\103\013\107\014\020\015\026\016" +
    "\033\017\024\025\025\055\213\001\002\000\004\010\214" +
    "\001\002\000\004\054\215\001\002\000\022\004\017\006" +
    "\021\007\031\014\020\015\026\016\033\017\024\025\025" +
    "\001\002\000\030\004\017\006\021\007\031\012\103\013" +
    "\107\014\020\015\026\016\033\017\024\025\025\055\217" +
    "\001\002\000\030\004\uffdf\006\uffdf\007\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\025\uffdf\055\uffdf" +
    "\001\002\000\006\023\044\060\045\001\002\000\004\035" +
    "\222\001\002\000\004\054\223\001\002\000\022\004\017" +
    "\006\021\007\031\014\020\015\026\016\033\017\024\025" +
    "\025\001\002\000\030\004\017\006\021\007\031\012\103" +
    "\013\107\014\020\015\026\016\033\017\024\025\025\055" +
    "\225\001\002\000\030\004\uffdd\006\uffdd\007\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\025\uffdd\055" +
    "\uffdd\001\002\000\012\021\232\022\234\024\235\057\233" +
    "\001\002\000\004\060\230\001\002\000\004\057\231\001" +
    "\002\000\030\004\uffec\006\uffec\007\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\025\uffec\055\uffec\001" +
    "\002\000\004\067\241\001\002\000\030\004\ufff0\006\ufff0" +
    "\007\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\025\ufff0\055\ufff0\001\002\000\004\057\240\001\002" +
    "\000\004\067\236\001\002\000\004\057\237\001\002\000" +
    "\030\004\uffee\006\uffee\007\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\025\uffee\055\uffee\001\002\000" +
    "\030\004\uffed\006\uffed\007\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\025\uffed\055\uffed\001\002\000" +
    "\004\057\242\001\002\000\030\004\uffef\006\uffef\007\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\025" +
    "\uffef\055\uffef\001\002\000\004\034\244\001\002\000\004" +
    "\035\245\001\002\000\004\054\246\001\002\000\022\004" +
    "\017\006\021\007\031\014\020\015\026\016\033\017\024" +
    "\025\025\001\002\000\030\004\017\006\021\007\031\012" +
    "\103\013\107\014\020\015\026\016\033\017\024\025\025" +
    "\055\250\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002\000\004\041\253\001\002\000\004\056\254" +
    "\001\002\000\004\034\255\001\002\000\004\035\256\001" +
    "\002\000\004\054\257\001\002\000\022\004\017\006\021" +
    "\007\031\014\020\015\026\016\033\017\024\025\025\001" +
    "\002\000\030\004\017\006\021\007\031\012\103\013\107" +
    "\014\020\015\026\016\033\017\024\025\025\055\261\001" +
    "\002\000\004\002\ufffc\001\002\000\004\040\263\001\002" +
    "\000\004\056\264\001\002\000\004\034\265\001\002\000" +
    "\004\035\266\001\002\000\004\054\267\001\002\000\022" +
    "\004\017\006\021\007\031\014\020\015\026\016\033\017" +
    "\024\025\025\001\002\000\030\004\017\006\021\007\031" +
    "\012\103\013\107\014\020\015\026\016\033\017\024\025" +
    "\025\055\271\001\002\000\004\002\ufffd\001\002\000\004" +
    "\035\273\001\002\000\004\054\274\001\002\000\022\004" +
    "\017\006\021\007\031\014\020\015\026\016\033\017\024" +
    "\025\025\001\002\000\030\004\017\006\021\007\031\012" +
    "\103\013\107\014\020\015\026\016\033\017\024\025\025" +
    "\055\276\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\031\004\022\006\027" +
    "\007\026\010\015\012\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\101\006\104\007\103\010" +
    "\077\011\107\012\100\001\001\000\002\001\001\000\004" +
    "\014\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\071\001\001\000\002\001\001" +
    "\000\004\005\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\076\004\022\006\027\007\026\010\015" +
    "\012\021\001\001\000\016\004\101\006\104\007\103\010" +
    "\077\011\107\012\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\110\001\001\000\002\001\001\000\016\003" +
    "\112\004\022\006\027\007\026\010\015\012\021\001\001" +
    "\000\016\004\101\006\104\007\103\010\077\011\107\012" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\122\004\022\006\027\007\026" +
    "\010\015\012\021\001\001\000\016\004\101\006\104\007" +
    "\103\010\077\011\107\012\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\136\004\022\006\027\007\026\010\015" +
    "\012\021\001\001\000\016\004\101\006\104\007\103\010" +
    "\077\011\107\012\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\142\004\022\006\027\007\026\010" +
    "\015\012\021\001\001\000\016\004\101\006\104\007\103" +
    "\010\077\011\107\012\100\001\001\000\002\001\001\000" +
    "\004\013\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\150\004\022\006\027\007\026\010\015\012" +
    "\021\001\001\000\016\004\101\006\104\007\103\010\077" +
    "\011\107\012\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\175\004\022\006" +
    "\027\007\026\010\015\012\021\001\001\000\016\004\101" +
    "\006\104\007\103\010\077\011\107\012\100\001\001\000" +
    "\002\001\001\000\004\013\206\001\001\000\004\013\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\204\004\022\006\027\007\026\010\015\012\021\001\001" +
    "\000\016\004\101\006\104\007\103\010\077\011\107\012" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\211\004\022\006\027\007\026\010" +
    "\015\012\021\001\001\000\016\004\101\006\104\007\103" +
    "\010\077\011\107\012\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\215\004\022\006\027\007\026" +
    "\010\015\012\021\001\001\000\016\004\101\006\104\007" +
    "\103\010\077\011\107\012\100\001\001\000\002\001\001" +
    "\000\004\013\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\223\004\022\006\027\007\026\010\015" +
    "\012\021\001\001\000\016\004\101\006\104\007\103\010" +
    "\077\011\107\012\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\246\004\022\006\027\007\026\010\015\012\021\001\001" +
    "\000\016\004\101\006\104\007\103\010\077\011\107\012" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\257\004\022\006\027" +
    "\007\026\010\015\012\021\001\001\000\016\004\101\006" +
    "\104\007\103\010\077\011\107\012\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\267" +
    "\004\022\006\027\007\026\010\015\012\021\001\001\000" +
    "\016\004\101\006\104\007\103\010\077\011\107\012\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\274\004\022\006\027\007\026\010\015" +
    "\012\021\001\001\000\016\004\101\006\104\007\103\010" +
    "\077\011\107\012\100\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_FOR ::= Tipo Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FOR ::= Para ParIzq SENTENCIA_FOR ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR ::= For ParIzq SENTENCIA_FOR ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DO_WHILE ::= Hacer LlaveIzq SENTENCIA LlaveDer Mientras ParIzq SENTENCIA_BOOLEANA ParDer P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DO_WHILE ::= Do LlaveIzq SENTENCIA LlaveDer While ParIzq SENTENCIA_BOOLEANA ParDer P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= Mientras ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= While ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF_ELSE ::= Si ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer Entonces LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF_ELSE ::= If ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer Else LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= Si ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= If ParDer SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Tipo Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Tipo Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Tipo Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Tipo Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Tipo Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Publico Estatico Vacio Main ParIzq ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Public Static Void Main ParIzq ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main ParIzq ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Entero Main ParIzq ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main ParIzq ParDer LlaveIzq SENTENCIA LlaveDer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

