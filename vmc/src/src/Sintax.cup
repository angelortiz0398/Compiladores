package src;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};
terminal Tipo, Comillas, If, Si, Else, Entonces, Do, Hacer, While,  Mientras, For, Para, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Igual, Cadena, CorcheteDer, Op_logico, Final, Division, FinDefinido, CorcheteIzq,
    ParIzq, ParDer, Static, Estatico, Void, Vacio, Int, Entero, Public, Publico, Continue, Resta, Clase, Continuar, Multiplicacion, Suma, 
    LlaveIzq, LlaveDer, Main, P_coma, Identificador, ERROR, SiDefinido, Romper, Sino, Class, Break,
    Numero;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR;

start with INICIO;

INICIO ::= 
    Int Main ParIzq ParDer LlaveIzq SENTENCIA LlaveDer |
    Entero Main ParIzq ParDer LlaveIzq SENTENCIA LlaveDer |
    Main ParIzq ParDer LlaveIzq SENTENCIA LlaveDer |
    Public Static Void Main ParIzq  ParDer LlaveIzq SENTENCIA LlaveDer |
    Publico Estatico Vacio Main ParIzq  ParDer LlaveIzq SENTENCIA LlaveDer 
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;
DECLARACION ::= 
    Tipo Identificador P_coma | 
    Tipo Identificador Op_atribucion Numero P_coma |
    Tipo Identificador Igual Numero P_coma |
    Tipo Identificador Op_incremento P_coma | 
    Tipo Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma
;
IF ::= 
    If ParDer SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer |
    Si ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= 
If ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer Else LlaveIzq SENTENCIA LlaveDer |
Si ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer Entonces LlaveIzq SENTENCIA LlaveDer
;
WHILE ::= 
While ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer |
Mientras ParIzq SENTENCIA_BOOLEANA ParDer LlaveIzq SENTENCIA LlaveDer
;
DO_WHILE ::= 
Do LlaveIzq SENTENCIA LlaveDer While ParIzq SENTENCIA_BOOLEANA ParDer P_coma |
Hacer LlaveIzq SENTENCIA LlaveDer Mientras ParIzq SENTENCIA_BOOLEANA ParDer P_coma
;
FOR ::= 
For ParIzq SENTENCIA_FOR ParDer LlaveIzq SENTENCIA LlaveDer |
Para ParIzq SENTENCIA_FOR ParDer LlaveIzq SENTENCIA LlaveDer 
;
SENTENCIA_FOR ::=
    Tipo Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;